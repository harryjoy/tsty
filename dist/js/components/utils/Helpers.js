"use strict";
var _ = require("lodash");
var fs = require("fs");
var path = require("path");
require("./ArrayMixins");
function mapIds(documents, idProp) {
    return _.map(documents, function (d) {
        return idProp ? d[idProp] : d.id;
    });
}
exports.mapIds = mapIds;
function mergeObjects(source, dest) {
    _.forOwn(source, function (val, key) {
        dest["" + key] = val;
    });
    return dest;
}
exports.mergeObjects = mergeObjects;
function lowerCaseFirstLetter(text) {
    return text.charAt(0).toLowerCase() + text.slice(1);
}
exports.lowerCaseFirstLetter = lowerCaseFirstLetter;
function traverseDirectory(basePath, excludeDirs, cb) {
    var jsFileRegex = /(.*).js/;
    if (fs.existsSync(basePath)) {
        fs.readdirSync(basePath).forEach(function (file) {
            var filePath = path.join(basePath, file);
            var fstat = fs.statSync(filePath);
            if (fstat.isFile() && jsFileRegex.test(file)) {
                cb(filePath);
            }
            else if (fstat.isDirectory() && excludeDirs.indexOf(file) === -1) {
                traverseDirectory(filePath, excludeDirs, cb);
            }
        });
    }
}
exports.traverseDirectory = traverseDirectory;
function diffDocs(last, current, idProp) {
    idProp = idProp || "id";
    return {
        updated: diffObj(current, last, idProp),
        deleted: mapIds(diffObj(last, current, function () {
            return true;
        }, idProp), idProp)
    };
}
exports.diffDocs = diffDocs;
function diffObj(array, values, cb, sortProp) {
    if (typeof cb === "string") {
        sortProp = cb;
        cb = null;
    }
    if (sortProp) {
        return _.reduce(array, function (memo, item) {
            var value, idx;
            while (memo.lastIndex < values.length) {
                value = values[memo.lastIndex];
                if (value[sortProp] < item[sortProp]) {
                    memo.lastIndex++;
                    continue;
                }
                break;
            }
            idx = memo.lastIndex;
            while (idx < values.length) {
                if (value[sortProp] > item[sortProp]) {
                    break;
                }
                if (_.isEqualWith(value, item, cb)) {
                    return memo;
                }
                value = values[++idx];
            }
            memo.diff.push(item);
            return memo;
        }, {
            diff: [],
            lastIndex: 0
        }).diff;
    }
    return _.reduce(array, function (memo, item) {
        if (!_.find(values, function (value) {
            return _.isEqualWith(value, item, cb);
        })) {
            memo.push(item);
        }
        return memo;
    }, []);
}
exports.diffObj = diffObj;

//# sourceMappingURL=data:application/json;base64,
