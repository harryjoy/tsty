"use strict";
function pre() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    return HookManager.addHook(args, "pre");
}
exports.pre = pre;
function post() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    return HookManager.addHook(args);
}
exports.post = post;
var HookManager = (function () {
    function HookManager() {
    }
    HookManager.addHook = function (args, action) {
        if (action === void 0) { action = "post"; }
        var hook = (args.length === 3) ? args[1] : args[0];
        if (HookManager.HOOKS.indexOf(hook) === -1) {
            throw new Error(hook + " is not a supported hook. Supported hooks are " + HookManager.HOOKS);
        }
        if (args.length === 3) {
            if (!args[0]["$$hooks"]) {
                args[0]["$$hooks"] = {
                    pre: [],
                    post: []
                };
            }
            args[0]["$$hooks"][action].push({
                hook: hook,
                method: args[0][args[1]]
            });
        }
        else {
            return function (clazz, method) {
                if (!clazz["$$hooks"]) {
                    clazz["$$hooks"] = {
                        pre: [],
                        post: []
                    };
                }
                clazz["$$hooks"][action].push({
                    hook: hook,
                    method: clazz[method]
                });
            };
        }
    };
    HookManager.HOOKS = ["init", "validate", "save", "remove", "find", "update"];
    return HookManager;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZGF0YWJhc2UvbW9uZ28vZGVjb3JhdG9ycy9ob29rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFBcUIsY0FBTztTQUFQLFdBQU8sQ0FBUCxzQkFBTyxDQUFQLElBQU87UUFBUCw2QkFBTzs7SUFDeEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFGZSxXQUFHLE1BRWxCLENBQUE7QUFFRDtJQUFzQixjQUFPO1NBQVAsV0FBTyxDQUFQLHNCQUFPLENBQVAsSUFBTztRQUFQLDZCQUFPOztJQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRmUsWUFBSSxPQUVuQixDQUFBO0FBRUQ7SUFBQTtJQW9DQSxDQUFDO0lBakNVLG1CQUFPLEdBQWQsVUFBZ0IsSUFBZ0IsRUFBRSxNQUF1QjtRQUF2QixzQkFBdUIsR0FBdkIsZUFBdUI7UUFDckQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUksSUFBSSxzREFBaUQsV0FBVyxDQUFDLEtBQU8sQ0FBQyxDQUFDO1FBQ2pHLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUc7b0JBQ2pCLEdBQUcsRUFBRSxFQUFFO29CQUNQLElBQUksRUFBRSxFQUFFO2lCQUNYLENBQUE7WUFDTCxDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDNUIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0IsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLFVBQUMsS0FBSyxFQUFFLE1BQU07Z0JBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHO3dCQUNmLEdBQUcsRUFBRSxFQUFFO3dCQUNQLElBQUksRUFBRSxFQUFFO3FCQUNYLENBQUE7Z0JBQ0wsQ0FBQztnQkFDRCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUMxQixJQUFJLEVBQUUsSUFBSTtvQkFDVixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQztpQkFDeEIsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFsQ00saUJBQUssR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFtQzVFLGtCQUFDO0FBQUQsQ0FwQ0EsQUFvQ0MsSUFBQSIsImZpbGUiOiJjb21wb25lbnRzL2RhdGFiYXNlL21vbmdvL2RlY29yYXRvcnMvaG9va3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcHJlICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIEhvb2tNYW5hZ2VyLmFkZEhvb2soYXJncywgXCJwcmVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0ICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIEhvb2tNYW5hZ2VyLmFkZEhvb2soYXJncyk7XG59XG5cbmNsYXNzIEhvb2tNYW5hZ2VyIHtcbiAgICBzdGF0aWMgSE9PS1MgPSBbXCJpbml0XCIsIFwidmFsaWRhdGVcIiwgXCJzYXZlXCIsIFwicmVtb3ZlXCIsIFwiZmluZFwiLCBcInVwZGF0ZVwiXTtcblxuICAgIHN0YXRpYyBhZGRIb29rIChhcmdzOiBBcnJheTxhbnk+LCBhY3Rpb246IHN0cmluZyA9IFwicG9zdFwiKSB7XG4gICAgICAgIGxldCBob29rID0gKGFyZ3MubGVuZ3RoID09PSAzKSA/IGFyZ3NbMV0gOiBhcmdzWzBdO1xuXG4gICAgICAgIGlmIChIb29rTWFuYWdlci5IT09LUy5pbmRleE9mKGhvb2spID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2hvb2t9IGlzIG5vdCBhIHN1cHBvcnRlZCBob29rLiBTdXBwb3J0ZWQgaG9va3MgYXJlICR7SG9va01hbmFnZXIuSE9PS1N9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIGlmICghYXJnc1swXVtcIiQkaG9va3NcIl0pIHtcbiAgICAgICAgICAgICAgICBhcmdzWzBdW1wiJCRob29rc1wiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJlOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgcG9zdDogW11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzWzBdW1wiJCRob29rc1wiXVthY3Rpb25dLnB1c2goe1xuICAgICAgICAgICAgICAgIGhvb2s6IGhvb2ssXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBhcmdzWzBdW2FyZ3NbMV1dXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoY2xhenosIG1ldGhvZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY2xhenpbXCIkJGhvb2tzXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXp6W1wiJCRob29rc1wiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0OiBbXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsYXp6W1wiJCRob29rc1wiXVthY3Rpb25dLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBob29rOiBob29rLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGNsYXp6W21ldGhvZF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
