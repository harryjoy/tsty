"use strict";
function model(Clazz) {
    var original = Clazz;
    var f = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return buildModelSchema(Clazz);
    };
    f.prototype = original.prototype;
    return f;
}
exports.model = model;
function buildModelSchema(Clazz) {
    var schema = Clazz.prototype["$$schema"] || {};
    var methods = Clazz.prototype["$$methods"] || [];
    var hooks = Clazz.prototype["$$hooks"] || [];
    var statics = Clazz.prototype["$$statics"] || [];
    var virtuals = Clazz.prototype["$$virtuals"] || [];
    var plugins = Clazz.prototype["$$plugins"] || [];
    var indices = Clazz.prototype["$$indices"] || [];
    var validators = Clazz.prototype["$$validators"] || [];
    var clazz = new Clazz;
    clazz.add(schema);
    clazz.methods = clazz.methods || {};
    methods.forEach(function (fn) {
        clazz.methods[fn.name] = fn.func;
    });
    (hooks["pre"] || []).forEach(function (hook) {
        clazz.pre(hook.hook, hook.method);
    });
    (hooks["post"] || []).forEach(function (hook) {
        clazz.pre(hook.hook, hook.method);
    });
    statics.forEach(function (fn) {
        clazz.statics[fn.name] = fn;
    });
    (virtuals["get"] || []).forEach(function (virtual) {
        clazz.virtual(virtual.path)["get"](virtual.method);
    });
    (virtuals["set"] || []).forEach(function (virtual) {
        clazz.virtual(virtual.path)["set"](virtual.method);
    });
    validators.forEach(function (validator) {
        clazz.path(validator.path).validate(validator.method, (validator.message || ("Invalid value for: " + validator.path)));
    });
    plugins.forEach(function (plugin) {
        clazz.plugin(plugin.fn, plugin.options);
    });
    indices.forEach(function (index) {
        clazz.index(index);
    });
    return clazz;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZGF0YWJhc2UvbW9uZ28vZGVjb3JhdG9ycy9tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBcUJBLGVBQXVCLEtBQUs7SUFDeEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLElBQUksQ0FBQyxHQUFRO1FBQVUsY0FBTzthQUFQLFdBQU8sQ0FBUCxzQkFBTyxDQUFQLElBQU87WUFBUCw2QkFBTzs7UUFDMUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztJQUNGLENBQUMsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztJQUNqQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQVBlLGFBQUssUUFPcEIsQ0FBQTtBQUVELDBCQUEwQixLQUFLO0lBQzNCLElBQU0sTUFBTSxHQUFVLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hELElBQU0sT0FBTyxHQUFTLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sS0FBSyxHQUFXLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZELElBQU0sT0FBTyxHQUFTLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sUUFBUSxHQUFRLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFELElBQU0sT0FBTyxHQUFTLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sT0FBTyxHQUFTLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sVUFBVSxHQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTVELElBQUksS0FBSyxHQUFJLElBQUksS0FBSyxDQUFDO0lBRXZCLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFHbEIsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNwQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFHaEI7UUFDRyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBR0gsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBb0I7UUFDOUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNILENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQW9CO1FBQy9DLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFHSCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBZ0I7UUFDN0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBR0gsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBdUI7UUFDcEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBdUI7UUFDcEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBR0gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQXlCO1FBQ3pDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUNoRCxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUMsQ0FBQyxDQUFDO0lBR0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQXFCO1FBQ2xDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBVTtRQUN2QixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvZGF0YWJhc2UvbW9uZ28vZGVjb3JhdG9ycy9tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBJTmFtZUFuZEZ1bmMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBmdW5jOiBGdW5jdGlvbjtcbn1cblxuaW50ZXJmYWNlIElIb29rQW5kTWV0aG9kIHtcbiAgICBob29rOiBzdHJpbmc7XG4gICAgbWV0aG9kOiBGdW5jdGlvbjtcbn1cblxuaW50ZXJmYWNlIElQYXRoQW5kTWV0aG9kIHtcbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElGbkFuZE9wdGlvbnMge1xuICAgIGZuOiBGdW5jdGlvbjtcbiAgICBvcHRpb25zPzogYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9kZWwgKENsYXp6KSB7XG4gICAgbGV0IG9yaWdpbmFsID0gQ2xheno7XG4gICAgbGV0IGY6IGFueSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBidWlsZE1vZGVsU2NoZW1hKENsYXp6KTtcbiAgICB9O1xuICAgIGYucHJvdG90eXBlID0gb3JpZ2luYWwucHJvdG90eXBlO1xuICAgIHJldHVybiBmO1xufVxuXG5mdW5jdGlvbiBidWlsZE1vZGVsU2NoZW1hKENsYXp6KSB7XG4gICAgY29uc3Qgc2NoZW1hICAgICAgICA9IENsYXp6LnByb3RvdHlwZVtcIiQkc2NoZW1hXCJdIHx8IHt9O1xuICAgIGNvbnN0IG1ldGhvZHMgICAgICAgPSBDbGF6ei5wcm90b3R5cGVbXCIkJG1ldGhvZHNcIl0gfHwgW107XG4gICAgY29uc3QgaG9va3MgICAgICAgICA9IENsYXp6LnByb3RvdHlwZVtcIiQkaG9va3NcIl0gfHwgW107XG4gICAgY29uc3Qgc3RhdGljcyAgICAgICA9IENsYXp6LnByb3RvdHlwZVtcIiQkc3RhdGljc1wiXSB8fCBbXTtcbiAgICBjb25zdCB2aXJ0dWFscyAgICAgID0gQ2xhenoucHJvdG90eXBlW1wiJCR2aXJ0dWFsc1wiXSB8fCBbXTtcbiAgICBjb25zdCBwbHVnaW5zICAgICAgID0gQ2xhenoucHJvdG90eXBlW1wiJCRwbHVnaW5zXCJdIHx8IFtdO1xuICAgIGNvbnN0IGluZGljZXMgICAgICAgPSBDbGF6ei5wcm90b3R5cGVbXCIkJGluZGljZXNcIl0gfHwgW107XG4gICAgY29uc3QgdmFsaWRhdG9ycyAgICA9IENsYXp6LnByb3RvdHlwZVtcIiQkdmFsaWRhdG9yc1wiXSB8fCBbXTtcblxuICAgIGxldCBjbGF6eiAgPSBuZXcgQ2xheno7XG5cbiAgICBjbGF6ei5hZGQoc2NoZW1hKTtcblxuICAgIC8vIE1ldGhvZHNcbiAgICBjbGF6ei5tZXRob2RzID0gY2xhenoubWV0aG9kcyB8fCB7fTtcbiAgICBtZXRob2RzLmZvckVhY2goKGZuOiB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgZnVuYzogRnVuY3Rpb247XG4gICAgfSkgPT4ge1xuICAgICAgICBjbGF6ei5tZXRob2RzW2ZuLm5hbWVdID0gZm4uZnVuYztcbiAgICB9KTtcblxuICAgIC8vIEhvb2tzIC0gcHJlL3Bvc3RcbiAgICAoaG9va3NbXCJwcmVcIl0gfHwgW10pLmZvckVhY2goKGhvb2s6IElIb29rQW5kTWV0aG9kKSA9PiB7XG4gICAgICAgIGNsYXp6LnByZShob29rLmhvb2ssIGhvb2subWV0aG9kKTtcbiAgICB9KTtcbiAgICAoaG9va3NbXCJwb3N0XCJdIHx8IFtdKS5mb3JFYWNoKChob29rOiBJSG9va0FuZE1ldGhvZCkgPT4ge1xuICAgICAgICBjbGF6ei5wcmUoaG9vay5ob29rLCBob29rLm1ldGhvZCk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGF0aWNzXG4gICAgc3RhdGljcy5mb3JFYWNoKChmbjogSU5hbWVBbmRGdW5jKSA9PiB7XG4gICAgICAgIGNsYXp6LnN0YXRpY3NbZm4ubmFtZV0gPSBmbjtcbiAgICB9KTtcblxuICAgIC8vIFZpcnR1YWxzIC0gZ2V0L3NldFxuICAgICh2aXJ0dWFsc1tcImdldFwiXSB8fCBbXSkuZm9yRWFjaCgodmlydHVhbDogSVBhdGhBbmRNZXRob2QpID0+IHtcbiAgICAgICAgY2xhenoudmlydHVhbCh2aXJ0dWFsLnBhdGgpW1wiZ2V0XCJdKHZpcnR1YWwubWV0aG9kKTtcbiAgICB9KTtcblxuICAgICh2aXJ0dWFsc1tcInNldFwiXSB8fCBbXSkuZm9yRWFjaCgodmlydHVhbDogSVBhdGhBbmRNZXRob2QpID0+IHtcbiAgICAgICAgY2xhenoudmlydHVhbCh2aXJ0dWFsLnBhdGgpW1wic2V0XCJdKHZpcnR1YWwubWV0aG9kKTtcbiAgICB9KTtcblxuICAgIC8vIHZhbGlkYXRlc1xuICAgIHZhbGlkYXRvcnMuZm9yRWFjaCgodmFsaWRhdG9yOiBJUGF0aEFuZE1ldGhvZCkgPT4ge1xuICAgICAgICBjbGF6ei5wYXRoKHZhbGlkYXRvci5wYXRoKS52YWxpZGF0ZSh2YWxpZGF0b3IubWV0aG9kLFxuICAgICAgICAgICAgKHZhbGlkYXRvci5tZXNzYWdlIHx8IChcIkludmFsaWQgdmFsdWUgZm9yOiBcIiArIHZhbGlkYXRvci5wYXRoKSkpO1xuICAgIH0pO1xuXG4gICAgLy8gUGx1Z2luc1xuICAgIHBsdWdpbnMuZm9yRWFjaCgocGx1Z2luOiBJRm5BbmRPcHRpb25zKSA9PiB7XG4gICAgICAgIGNsYXp6LnBsdWdpbihwbHVnaW4uZm4sIHBsdWdpbi5vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGluZGljZXMuZm9yRWFjaCgoaW5kZXg6IGFueSkgPT4ge1xuICAgICAgICBjbGF6ei5pbmRleChpbmRleCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2xheno7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
