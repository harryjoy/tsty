"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var mongoose = require("mongoose");
var Promise = require("bluebird");
var _ = require("lodash");
var Logger_1 = require("../../logs/Logger");
var Constants_1 = require("../Constants");
var ModuleConfig_1 = require("../../../lib/module/ModuleConfig");
var Database_1 = require("../Database");
var index_1 = require("../../../index");
var MongoDatabase = (function (_super) {
    __extends(MongoDatabase, _super);
    function MongoDatabase(url, prefix, options) {
        _super.call(this, url, prefix, options);
        mongoose.set("debug", options && options.mongoose && options.mongoose.debug);
        this.connectionPool = {};
    }
    MongoDatabase.prototype.connect = function () {
        var defer = Promise.defer();
        this.openNewConnection(this.url, this.options)
            .then(this.onDefaultConnectionOpen.bind(this, defer))
            .catch(function (err) {
            defer.reject(err);
        });
        return defer.promise;
    };
    MongoDatabase.prototype.disconnect = function () {
        var _this = this;
        var defer = Promise.defer();
        if (!this.isConnected()) {
            Logger_1.default.info("No connection is opened to close.");
            return;
        }
        this.connection.close();
        this.connection.once("disconnect", function () {
            _this.reset();
            defer.resolve({
                disconnected: true
            });
        });
        this.connection.once("error", function (err) {
            defer.reject(err);
        });
        return defer.promise;
    };
    MongoDatabase.prototype.isConnected = function () {
        return this.getConnectionReadyState() === Constants_1.default.connStats["CONNECTED"];
    };
    MongoDatabase.prototype.listen = function (name, cb) {
        this.connection.on(name, cb);
    };
    MongoDatabase.prototype.updateModelStructure = function (model) {
        model.fields = _.merge({}, model.fields);
        model.methods = _.merge({}, model.methods);
        model.statics = _.merge({}, model.statics);
    };
    MongoDatabase.prototype.bindModelListeners = function (model, listeners) {
    };
    MongoDatabase.prototype.registerModel = function (modelData) {
        var found = this.isModelExistInModels(modelData.name);
        if (found) {
            return;
        }
        var schema = modelData.schema;
        var colllection = modelData.collection;
        if (this.prefix) {
            colllection = this.prefix + "_" + colllection;
        }
        var dbModels = [];
        for (var _i = 0, _a = modelData.dbs; _i < _a.length; _i++) {
            var db = _a[_i];
            dbModels.push(this.createDbModel(db, modelData.name, schema, colllection));
        }
        return dbModels;
    };
    MongoDatabase.prototype.getConnectionReadyState = function () {
        return this.connection.readyState;
    };
    MongoDatabase.prototype.onDefaultConnectionOpen = function (defer, result) {
        this.connection = result.connection;
        var config = index_1.application.config;
        var promises = [];
        if (config.dbOptions.dbs && config.dbOptions.dbs.length > 0) {
            for (var i in config.dbOptions.dbs) {
                promises.push(this.openNewConnection(config.dbOptions.dbs[i], _.merge(this.options || {}, {
                    alias: i
                })));
            }
        }
        Promise.all(promises).then(this.databaseReady.bind(this, defer));
    };
    MongoDatabase.prototype.databaseReady = function (defer, connectionPool) {
        for (var _i = 0, connectionPool_1 = connectionPool; _i < connectionPool_1.length; _i++) {
            var conn = connectionPool_1[_i];
            if (conn.state !== "fulfilled") {
                continue;
            }
            this.connectionPool[conn.value.alias] = conn.value.connection;
        }
        defer.resolve();
    };
    MongoDatabase.prototype.openNewConnection = function (url, options) {
        var defer = Promise.defer();
        var connection = mongoose.createConnection(url, options);
        connection.once("connected", function () {
            defer.resolve({
                uri: url,
                alias: options.alias,
                connection: connection
            });
        });
        connection.once("error", function (err) {
            defer.reject(err);
        });
        return defer.promise;
    };
    MongoDatabase.prototype.createDbModel = function (alias, name, schema, colllection) {
        var model;
        if (colllection) {
            model = this.getMongoConnectionByAlias(alias).model(name, schema, colllection);
        }
        else {
            model = this.getMongoConnectionByAlias(alias).model(name, schema);
        }
        return model;
    };
    MongoDatabase.prototype.getMongoConnectionByAlias = function (alias) {
        if (alias === ModuleConfig_1.default.DEFAULT_DB_NAME || !this.connectionPool[alias]) {
            return this.connection;
        }
        return this.connectionPool[alias];
    };
    MongoDatabase.prototype.isConnectionOpenForAlias = function (alias) {
        return (alias === ModuleConfig_1.default.DEFAULT_DB_NAME) || !!this.connectionPool[alias];
    };
    return MongoDatabase;
}(Database_1.AppDatabase));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MongoDatabase;

//# sourceMappingURL=data:application/json;base64,
