"use strict";
var _ = require("lodash");
var Promise = require("bluebird");
var AppDatabase = (function () {
    function AppDatabase(url, prefix, options) {
        this.url = url;
        this.prefix = prefix;
        if (options) {
            this.options = _.merge(this.options, options);
        }
        else {
            this.options = {};
        }
        this.reset();
    }
    Object.defineProperty(AppDatabase.prototype, "connection", {
        get: function () {
            return this.dbConnection;
        },
        set: function (connection) {
            this.dbConnection = connection;
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    AppDatabase.prototype.reset = function () {
        if (this.connection) {
            this.disconnect();
        }
        this.connection = null;
        this.models = {};
    };
    AppDatabase.prototype.registerModelPostSteps = function (key, model) {
        if (model) {
            Promise.promisifyAll(model);
            Promise.promisifyAll(model["prototype"]);
        }
        this.models[key] = model;
    };
    AppDatabase.prototype.isModelExistInModels = function (key) {
        return !!this.models[key];
    };
    AppDatabase.prototype.getModel = function (key) {
        return this.models[key];
    };
    return AppDatabase;
}());
exports.AppDatabase = AppDatabase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZGF0YWJhc2UvRGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVksQ0FBQyxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLElBQVksT0FBTyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBSXBDO0lBTUkscUJBQXNCLEdBQVcsRUFBWSxNQUFjLEVBQUUsT0FBUTtRQUEvQyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVksV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUN2RCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsc0JBQUksbUNBQVU7YUFBZDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzdCLENBQUM7YUFFRCxVQUFlLFVBQWE7WUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDbkMsQ0FBQzs7O09BSkE7OztJQU1ELDJCQUFLLEdBQUw7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQVVELDRDQUFzQixHQUF0QixVQUF1QixHQUFXLEVBQUUsS0FBUTtRQUN4QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1IsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QixPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsMENBQW9CLEdBQXBCLFVBQXFCLEdBQVc7UUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCw4QkFBUSxHQUFSLFVBQVMsR0FBVztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQXBEQSxBQW9EQyxJQUFBO0FBcERxQixtQkFBVyxjQW9EaEMsQ0FBQSIsImZpbGUiOiJjb21wb25lbnRzL2RhdGFiYXNlL0RhdGFiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0ICogYXMgVHlwZXMgZnJvbSBcIi4uL3R5cGVzL1R5cGVzXCI7XG5pbXBvcnQgeyBJRGJNb2RlbCB9IGZyb20gXCIuL0lEYk1vZGVsXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBcHBEYXRhYmFzZTxULCBVIGV4dGVuZHMgSURiTW9kZWwsIFo+IHtcbiAgICBwcm90ZWN0ZWQgbW9kZWxzOiBUeXBlcy5NYXA7XG4gICAgcHJvdGVjdGVkIG9wdGlvbnM6IGFueTtcblxuICAgIHByaXZhdGUgZGJDb25uZWN0aW9uOiBUO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHVybDogc3RyaW5nLCBwcm90ZWN0ZWQgcHJlZml4OiBzdHJpbmcsIG9wdGlvbnM/KSB7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfLm1lcmdlKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbm5lY3Rpb24oKTogVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiQ29ubmVjdGlvbjtcbiAgICB9O1xuXG4gICAgc2V0IGNvbm5lY3Rpb24oY29ubmVjdGlvbjogVCkge1xuICAgICAgICB0aGlzLmRiQ29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgfTtcblxuICAgIHJlc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uKSB7IHRoaXMuZGlzY29ubmVjdCgpOyB9XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubW9kZWxzID0ge307XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgY29ubmVjdCgpOiBQcm9taXNlPHt9PjtcbiAgICBhYnN0cmFjdCBkaXNjb25uZWN0KCk6IFByb21pc2U8e30+O1xuICAgIGFic3RyYWN0IGlzQ29ubmVjdGVkKCk6IGJvb2xlYW47XG4gICAgYWJzdHJhY3QgbGlzdGVuKG5hbWU6IHN0cmluZywgY2I6IEZ1bmN0aW9uKTogdm9pZCB8IGFueTtcbiAgICBhYnN0cmFjdCB1cGRhdGVNb2RlbFN0cnVjdHVyZShtb2RlbDogVSk7XG4gICAgYWJzdHJhY3QgYmluZE1vZGVsTGlzdGVuZXJzKG1vZGVsRGF0YTogVSwgbGlzdGVuZXJzOiBBcnJheTxUeXBlcy5MaXN0ZW5lcj4pO1xuICAgIGFic3RyYWN0IHJlZ2lzdGVyTW9kZWwobW9kZWxEYXRhOiBVKTogQXJyYXk8Wj47XG5cbiAgICByZWdpc3Rlck1vZGVsUG9zdFN0ZXBzKGtleTogc3RyaW5nLCBtb2RlbDogWikge1xuICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICAgIFByb21pc2UucHJvbWlzaWZ5QWxsKG1vZGVsKTtcbiAgICAgICAgICAgIFByb21pc2UucHJvbWlzaWZ5QWxsKG1vZGVsW1wicHJvdG90eXBlXCJdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsc1trZXldID0gbW9kZWw7XG4gICAgfVxuXG4gICAgaXNNb2RlbEV4aXN0SW5Nb2RlbHMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5tb2RlbHNba2V5XTtcbiAgICB9XG5cbiAgICBnZXRNb2RlbChrZXk6IHN0cmluZyk6IFoge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHNba2V5XTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
