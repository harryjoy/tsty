"use strict";
var EventsEmitter = require("eventemitter2");
var Helpers = require("../utils/Helpers");
var methodsToCopyBind = [
    "addListener",
    "on",
    "onAny",
    "offAny",
    "once",
    "many",
    "removeListener",
    "off",
    "removeAllListeners",
    "setMaxListeners",
    "listeners",
    "listenersAny"
];
var Events = (function () {
    function Events(name) {
        var _this = this;
        this.name = name;
        this.delimiter = ".";
        this.emitter = new EventsEmitter.EventEmitter2({
            wildcard: true,
            delimiter: this.delimiter,
            newListener: true,
            maxListeners: 20
        });
        methodsToCopyBind.forEach(function (method) {
            _this[method] = _this.emitter[method].bind(_this.emitter);
        });
        this._default = {};
    }
    Events.prototype.emit = function (event, cb) {
        var args = this.prepArgs(arguments, this.name, event, this._default);
        return this.emitter.emit.apply(this.emitter, args);
    };
    Events.prototype.on = function (name, cb) {
        this.on(name, cb);
    };
    Events.prototype.setDefaults = function (data) {
        Helpers.mergeObjects(data, this._default);
    };
    Events.prototype.prepArgs = function (args, name, event, defaults) {
        args = Array.from(args);
        var namespace = [name];
        if (!Array.isArray(event)) {
            event = event.split(this.delimiter);
        }
        namespace = namespace.concat(event);
        args.shift();
        args.unshift(namespace);
        if (defaults) {
            args.push(defaults);
        }
        return args;
    };
    return Events;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Events;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZXZlbnRzL0V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxhQUFhLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFDL0MsSUFBWSxPQUFPLFdBQU0sa0JBQWtCLENBQUMsQ0FBQTtBQUU1QyxJQUFJLGlCQUFpQixHQUFHO0lBQ3BCLGFBQWE7SUFDYixJQUFJO0lBQ0osT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLGdCQUFnQjtJQUNoQixLQUFLO0lBQ0wsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsY0FBYztDQUNqQixDQUFDO0FBRUY7SUFLSSxnQkFBbUIsSUFBWTtRQUxuQyxpQkFnREM7UUEzQ3NCLFNBQUksR0FBSixJQUFJLENBQVE7UUFGdkIsY0FBUyxHQUFXLEdBQUcsQ0FBQztRQUc1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQztZQUMzQyxRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixXQUFXLEVBQUUsSUFBSTtZQUNqQixZQUFZLEVBQUUsRUFBRTtTQUNuQixDQUFDLENBQUM7UUFFSCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO1lBQzdCLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQscUJBQUksR0FBSixVQUFLLEtBQXdCLEVBQUUsRUFBc0I7UUFDakQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsbUJBQUUsR0FBRixVQUFHLElBQXVCLEVBQUUsRUFBWTtRQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsNEJBQVcsR0FBWCxVQUFZLElBQUk7UUFDWixPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUdPLHlCQUFRLEdBQWhCLFVBQWlCLElBQUksRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFFBQWE7UUFDMUQsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQ0QsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0wsYUFBQztBQUFELENBaERBLEFBZ0RDLElBQUE7QUFoREQ7d0JBZ0RDLENBQUEiLCJmaWxlIjoiY29tcG9uZW50cy9ldmVudHMvRXZlbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRXZlbnRzRW1pdHRlciBmcm9tIFwiZXZlbnRlbWl0dGVyMlwiO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tIFwiLi4vdXRpbHMvSGVscGVyc1wiO1xuXG52YXIgbWV0aG9kc1RvQ29weUJpbmQgPSBbXG4gICAgXCJhZGRMaXN0ZW5lclwiLFxuICAgIFwib25cIixcbiAgICBcIm9uQW55XCIsXG4gICAgXCJvZmZBbnlcIixcbiAgICBcIm9uY2VcIixcbiAgICBcIm1hbnlcIixcbiAgICBcInJlbW92ZUxpc3RlbmVyXCIsXG4gICAgXCJvZmZcIixcbiAgICBcInJlbW92ZUFsbExpc3RlbmVyc1wiLFxuICAgIFwic2V0TWF4TGlzdGVuZXJzXCIsXG4gICAgXCJsaXN0ZW5lcnNcIixcbiAgICBcImxpc3RlbmVyc0FueVwiXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudHMge1xuICAgIHByaXZhdGUgZW1pdHRlcjogRXZlbnRzRW1pdHRlci5FdmVudEVtaXR0ZXIyO1xuICAgIHByaXZhdGUgX2RlZmF1bHQ7XG4gICAgcHJpdmF0ZSBkZWxpbWl0ZXI6IHN0cmluZyA9IFwiLlwiO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRXZlbnRzRW1pdHRlci5FdmVudEVtaXR0ZXIyKHtcbiAgICAgICAgICAgIHdpbGRjYXJkOiB0cnVlLFxuICAgICAgICAgICAgZGVsaW1pdGVyOiB0aGlzLmRlbGltaXRlcixcbiAgICAgICAgICAgIG5ld0xpc3RlbmVyOiB0cnVlLFxuICAgICAgICAgICAgbWF4TGlzdGVuZXJzOiAyMFxuICAgICAgICB9KTtcblxuICAgICAgICBtZXRob2RzVG9Db3B5QmluZC5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXSA9IHRoaXMuZW1pdHRlclttZXRob2RdLmJpbmQodGhpcy5lbWl0dGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdCA9IHt9O1xuICAgIH1cblxuICAgIGVtaXQoZXZlbnQ6IHN0cmluZyB8IHN0cmluZ1tdLCBjYj86IEZ1bmN0aW9uIHwgT2JqZWN0KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnByZXBBcmdzKGFyZ3VtZW50cywgdGhpcy5uYW1lLCBldmVudCwgdGhpcy5fZGVmYXVsdCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdC5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9uKG5hbWU6IHN0cmluZyB8IHN0cmluZ1tdLCBjYjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5vbihuYW1lLCBjYik7XG4gICAgfVxuXG4gICAgc2V0RGVmYXVsdHMoZGF0YSkge1xuICAgICAgICBIZWxwZXJzLm1lcmdlT2JqZWN0cyhkYXRhLCB0aGlzLl9kZWZhdWx0KTtcbiAgICB9XG5cbiAgICAvLyBIZWxwcyBpbiBwcmVwYXJpbmcgb3VyIGFyZ3VtZW50cyBmb3IgcGFzc2luZyB0byBlbWl0IGFuZCBlbWl0QXN5bmNcbiAgICBwcml2YXRlIHByZXBBcmdzKGFyZ3MsIG5hbWU6IHN0cmluZywgZXZlbnQ6IGFueSwgZGVmYXVsdHM6IGFueSk6IGFueSB7XG4gICAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpO1xuICAgICAgICBsZXQgbmFtZXNwYWNlID0gW25hbWVdO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgICAgICBldmVudCA9IGV2ZW50LnNwbGl0KHRoaXMuZGVsaW1pdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lc3BhY2UgPSBuYW1lc3BhY2UuY29uY2F0KGV2ZW50KTtcbiAgICAgICAgYXJncy5zaGlmdCgpO1xuICAgICAgICBhcmdzLnVuc2hpZnQobmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2goZGVmYXVsdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
