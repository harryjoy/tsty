"use strict";
var Helpers = require("../../components/utils/Helpers");
var chai_1 = require("chai");
describe("Helpers", function () {
    var docArray1, docArray2;
    before(function () {
        docArray1 = [
            { id: 1, x: 1, y: 1 },
            { id: 2, x: 1, y: 1 },
            { id: 3, x: 1, y: 1 },
            { id: 4, x: 1, y: 1 },
            { id: 5, x: 1, y: 1 },
            { id: 6, x: 1, y: 1 },
            { id: 7, x: 1, y: 1 }
        ];
        docArray2 = [
            { id: 1, x: 2, y: 1 },
            { id: 2, x: 1, y: 1 },
            { id: 4, x: 1, y: 2 },
            { id: 6, x: 2, y: 1 }
        ];
    });
    it("shoud map correct ids", function () {
        chai_1.expect(Helpers.mapIds(docArray1, "id")).to.be.eql([1, 2, 3, 4, 5, 6, 7]);
        chai_1.expect(Helpers.mapIds(docArray2, "id")).to.be.eql([1, 2, 4, 6]);
    });
    it("shoud lower case first letter of string", function () {
        chai_1.expect(Helpers.lowerCaseFirstLetter("Lowercase")).to.be.eql("lowercase");
    });
    describe("diff object", function () {
        it("shoud be able to find correct difference between two array", function () {
            chai_1.expect(Helpers.diffObj([], [], "x")).to.be.eql([]);
            chai_1.expect(Helpers.diffObj(docArray1, [], "id")).to.be.eql(docArray1);
            chai_1.expect(Helpers.diffObj([], docArray1, "y")).to.be.eql([]);
        });
        it("shoud be able to find correct difference between two document array", function () {
            chai_1.expect(Helpers.diffDocs(docArray1, docArray2)).to.be.eql({
                updated: [docArray2[0], docArray2[2], docArray2[3]],
                deleted: [docArray1[2].id, docArray1[4].id, docArray1[6].id]
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzL2NvbXBvbmVudHMvSGVscGVycy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxnQ0FBZ0MsQ0FBQyxDQUFBO0FBQzFELHFCQUF1QixNQUFNLENBQUMsQ0FBQTtBQUU5QixRQUFRLENBQUMsU0FBUyxFQUFFO0lBQ2hCLElBQUksU0FBcUIsRUFBRSxTQUFxQixDQUFDO0lBRWpELE1BQU0sQ0FBQztRQUNILFNBQVMsR0FBRztZQUNSLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7WUFDbkIsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQztZQUNuQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1lBQ25CLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7WUFDbkIsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQztZQUNuQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1lBQ25CLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7U0FDdEIsQ0FBQztRQUNGLFNBQVMsR0FBRztZQUNSLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7WUFDbkIsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQztZQUNuQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1lBQ25CLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7U0FDdEIsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFO1FBQ3hCLGFBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxhQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7UUFDMUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGFBQWEsRUFBRTtRQUNwQixFQUFFLENBQUMsNERBQTRELEVBQUU7WUFDN0QsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsRSxhQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUVBQXFFLEVBQUU7WUFDdEUsYUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ3JELE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUMvRCxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdHMvY29tcG9uZW50cy9IZWxwZXJzLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBIZWxwZXJzIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3V0aWxzL0hlbHBlcnNcIjtcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gXCJjaGFpXCI7XG5cbmRlc2NyaWJlKFwiSGVscGVyc1wiLCAoKSA9PiB7XG4gICAgbGV0IGRvY0FycmF5MTogQXJyYXk8YW55PiwgZG9jQXJyYXkyOiBBcnJheTxhbnk+O1xuXG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgZG9jQXJyYXkxID0gW1xuICAgICAgICAgICAge2lkOiAxLCB4OiAxLCB5OiAxfSxcbiAgICAgICAgICAgIHtpZDogMiwgeDogMSwgeTogMX0sXG4gICAgICAgICAgICB7aWQ6IDMsIHg6IDEsIHk6IDF9LFxuICAgICAgICAgICAge2lkOiA0LCB4OiAxLCB5OiAxfSxcbiAgICAgICAgICAgIHtpZDogNSwgeDogMSwgeTogMX0sXG4gICAgICAgICAgICB7aWQ6IDYsIHg6IDEsIHk6IDF9LFxuICAgICAgICAgICAge2lkOiA3LCB4OiAxLCB5OiAxfVxuICAgICAgICBdO1xuICAgICAgICBkb2NBcnJheTIgPSBbXG4gICAgICAgICAgICB7aWQ6IDEsIHg6IDIsIHk6IDF9LFxuICAgICAgICAgICAge2lkOiAyLCB4OiAxLCB5OiAxfSxcbiAgICAgICAgICAgIHtpZDogNCwgeDogMSwgeTogMn0sXG4gICAgICAgICAgICB7aWQ6IDYsIHg6IDIsIHk6IDF9XG4gICAgICAgIF07XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VkIG1hcCBjb3JyZWN0IGlkc1wiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChIZWxwZXJzLm1hcElkcyhkb2NBcnJheTEsIFwiaWRcIikpLnRvLmJlLmVxbChbMSwgMiwgMywgNCwgNSwgNiwgN10pO1xuICAgICAgICBleHBlY3QoSGVscGVycy5tYXBJZHMoZG9jQXJyYXkyLCBcImlkXCIpKS50by5iZS5lcWwoWzEsIDIsIDQsIDZdKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWQgbG93ZXIgY2FzZSBmaXJzdCBsZXR0ZXIgb2Ygc3RyaW5nXCIsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KEhlbHBlcnMubG93ZXJDYXNlRmlyc3RMZXR0ZXIoXCJMb3dlcmNhc2VcIikpLnRvLmJlLmVxbChcImxvd2VyY2FzZVwiKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiZGlmZiBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgICBpdChcInNob3VkIGJlIGFibGUgdG8gZmluZCBjb3JyZWN0IGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KEhlbHBlcnMuZGlmZk9iaihbXSwgW10sIFwieFwiKSkudG8uYmUuZXFsKFtdKTtcbiAgICAgICAgICAgIGV4cGVjdChIZWxwZXJzLmRpZmZPYmooZG9jQXJyYXkxLCBbXSwgXCJpZFwiKSkudG8uYmUuZXFsKGRvY0FycmF5MSk7XG4gICAgICAgICAgICBleHBlY3QoSGVscGVycy5kaWZmT2JqKFtdLCBkb2NBcnJheTEsIFwieVwiKSkudG8uYmUuZXFsKFtdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91ZCBiZSBhYmxlIHRvIGZpbmQgY29ycmVjdCBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGRvY3VtZW50IGFycmF5XCIsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChIZWxwZXJzLmRpZmZEb2NzKGRvY0FycmF5MSwgZG9jQXJyYXkyKSkudG8uYmUuZXFsKHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkOiBbZG9jQXJyYXkyWzBdLCBkb2NBcnJheTJbMl0sIGRvY0FycmF5MlszXV0sXG4gICAgICAgICAgICAgICAgZGVsZXRlZDogW2RvY0FycmF5MVsyXS5pZCwgZG9jQXJyYXkxWzRdLmlkLCBkb2NBcnJheTFbNl0uaWRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
