"use strict";
var chai_1 = require("chai");
var Events_1 = require("../../components/events/Events");
var sinon = require("sinon");
describe("Events", function () {
    var evt, listener;
    before(function () {
        evt = new Events_1.default("one");
    });
    beforeEach(function () {
        listener = sinon.stub();
        listener.reset();
    });
    it("shoud be initialized", function () {
        chai_1.expect(evt).to.exist;
        chai_1.expect(evt.name).to.exist.and.to.be.eql("one");
        chai_1.expect(evt.on).to.exist;
    });
    it("should use name", function () {
        evt.on([evt.name, "test"], listener);
        evt.emit("test");
        chai_1.expect(listener.calledOnce).to.be.true;
    });
    it("should work with arrays", function () {
        evt.on([evt.name, "test", "array"], listener);
        evt.emit(["test", "array"]);
        chai_1.expect(listener.calledOnce).to.be.true;
    });
    it("should work with dot notation for array", function () {
        evt.on(evt.name + ".test" + ".array", listener);
        evt.emit(["test", "array"]);
        chai_1.expect(listener.calledOnce).to.be.true;
    });
    describe("Default Data", function () {
        var def = { test: true };
        it("should send default data", function () {
            evt.setDefaults(def);
            evt.on("one.default", listener);
            evt.emit("default");
            chai_1.expect(listener.calledOnce).to.be.true;
            chai_1.expect(listener.calledWith(def)).to.be.true;
        });
        it("should append default data to end of array", function () {
            var obj = {};
            evt.setDefaults(def);
            evt.on("one.default.append", listener);
            evt.emit("default.append", obj);
            chai_1.expect(listener.calledOnce).to.be.true;
            chai_1.expect(listener.calledWith(obj, def)).to.be.true;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzL2NvbXBvbmVudHMvRXZlbnRzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUF1QixNQUFNLENBQUMsQ0FBQTtBQUM5Qix1QkFBbUIsZ0NBQWdDLENBQUMsQ0FBQTtBQUNwRCxJQUFZLEtBQUssV0FBTSxPQUFPLENBQUMsQ0FBQTtBQUUvQixRQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2YsSUFBSSxHQUFXLEVBQUUsUUFBUSxDQUFDO0lBRTFCLE1BQU0sQ0FBQztRQUNILEdBQUcsR0FBRyxJQUFJLGdCQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUM7UUFDUCxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQUN2QixhQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNyQixhQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLGFBQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtRQUNsQixHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pCLGFBQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUU7UUFDMUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM1QixhQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFO1FBQzFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxPQUFPLEdBQUcsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM1QixhQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUNyQixJQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUMzQixFQUFFLENBQUMsMEJBQTBCLEVBQUU7WUFDM0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixHQUFHLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BCLGFBQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDdkMsYUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtZQUM3QyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDZixHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLEdBQUcsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoQyxhQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLGFBQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0cy9jb21wb25lbnRzL0V2ZW50cy5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCBFdmVudHMgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvZXZlbnRzL0V2ZW50c1wiO1xuaW1wb3J0ICogYXMgc2lub24gZnJvbSBcInNpbm9uXCI7XG5cbmRlc2NyaWJlKFwiRXZlbnRzXCIsICgpID0+IHtcbiAgICBsZXQgZXZ0OiBFdmVudHMsIGxpc3RlbmVyO1xuXG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgICAgZXZ0ID0gbmV3IEV2ZW50cyhcIm9uZVwiKTtcbiAgICB9KTtcblxuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpc3RlbmVyID0gc2lub24uc3R1YigpO1xuICAgICAgICBsaXN0ZW5lci5yZXNldCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91ZCBiZSBpbml0aWFsaXplZFwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChldnQpLnRvLmV4aXN0O1xuICAgICAgICBleHBlY3QoZXZ0Lm5hbWUpLnRvLmV4aXN0LmFuZC50by5iZS5lcWwoXCJvbmVcIik7XG4gICAgICAgIGV4cGVjdChldnQub24pLnRvLmV4aXN0O1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgdXNlIG5hbWVcIiwgKCkgPT4ge1xuICAgICAgICBldnQub24oW2V2dC5uYW1lLCBcInRlc3RcIl0sIGxpc3RlbmVyKTtcbiAgICAgICAgZXZ0LmVtaXQoXCJ0ZXN0XCIpO1xuICAgICAgICBleHBlY3QobGlzdGVuZXIuY2FsbGVkT25jZSkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHdvcmsgd2l0aCBhcnJheXNcIiwgKCkgPT4ge1xuICAgICAgICBldnQub24oW2V2dC5uYW1lLCBcInRlc3RcIiwgXCJhcnJheVwiXSwgbGlzdGVuZXIpO1xuICAgICAgICBldnQuZW1pdChbXCJ0ZXN0XCIsIFwiYXJyYXlcIl0pO1xuICAgICAgICBleHBlY3QobGlzdGVuZXIuY2FsbGVkT25jZSkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHdvcmsgd2l0aCBkb3Qgbm90YXRpb24gZm9yIGFycmF5XCIsICgpID0+IHtcbiAgICAgICAgZXZ0Lm9uKGV2dC5uYW1lICsgXCIudGVzdFwiICsgXCIuYXJyYXlcIiwgbGlzdGVuZXIpO1xuICAgICAgICBldnQuZW1pdChbXCJ0ZXN0XCIsIFwiYXJyYXlcIl0pO1xuICAgICAgICBleHBlY3QobGlzdGVuZXIuY2FsbGVkT25jZSkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiRGVmYXVsdCBEYXRhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZGVmID0geyB0ZXN0OiB0cnVlIH07XG4gICAgICAgIGl0KFwic2hvdWxkIHNlbmQgZGVmYXVsdCBkYXRhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV2dC5zZXREZWZhdWx0cyhkZWYpO1xuICAgICAgICAgICAgZXZ0Lm9uKFwib25lLmRlZmF1bHRcIiwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgZXZ0LmVtaXQoXCJkZWZhdWx0XCIpO1xuICAgICAgICAgICAgZXhwZWN0KGxpc3RlbmVyLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgICAgICAgICBleHBlY3QobGlzdGVuZXIuY2FsbGVkV2l0aChkZWYpKS50by5iZS50cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBhcHBlbmQgZGVmYXVsdCBkYXRhIHRvIGVuZCBvZiBhcnJheVwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgICAgICBldnQuc2V0RGVmYXVsdHMoZGVmKTtcbiAgICAgICAgICAgIGV2dC5vbihcIm9uZS5kZWZhdWx0LmFwcGVuZFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBldnQuZW1pdChcImRlZmF1bHQuYXBwZW5kXCIsIG9iaik7XG4gICAgICAgICAgICBleHBlY3QobGlzdGVuZXIuY2FsbGVkT25jZSkudG8uYmUudHJ1ZTtcbiAgICAgICAgICAgIGV4cGVjdChsaXN0ZW5lci5jYWxsZWRXaXRoKG9iaiwgZGVmKSkudG8uYmUudHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
