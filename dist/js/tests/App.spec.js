"use strict";
var Promise = require("bluebird");
var sinon = require("sinon");
var chai_1 = require("chai");
var lazy_dependable_1 = require("lazy-dependable");
var App = require("../index");
var ModuleNames_1 = require("../lib/config/ModuleNames");
var DummyInitializer = (function () {
    function DummyInitializer() {
    }
    DummyInitializer.prototype.initialize = function (app) {
        var defer = Promise.defer();
        defer.resolve(true);
        return defer.promise;
    };
    return DummyInitializer;
}());
var DummyConfigBuilder = (function () {
    function DummyConfigBuilder() {
    }
    DummyConfigBuilder.prototype.configure = function (config) {
        var defer = Promise.defer();
        config["me"] = "harsh raval";
        config.putExtra("ok", "awesome");
        defer.resolve();
        return defer.promise;
    };
    return DummyConfigBuilder;
}());
describe("Application", function () {
    var packageData = require("../../package.json");
    var dummyInit = new DummyInitializer();
    var dummyConfigBuilder = new DummyConfigBuilder();
    var initSpy, configSpy;
    before(function () {
        initSpy = sinon.spy(dummyInit, "initialize");
        configSpy = sinon.spy(dummyConfigBuilder, "configure");
        App.initializer.addInitializer(dummyInit);
        App.configBuilder.addConfigBuilder(dummyConfigBuilder);
    });
    it("shoud be initialized", function () {
        chai_1.expect(App).to.exist;
        chai_1.expect(App.application).to.exist;
        chai_1.expect(App.application).to.be.an("object");
    });
    it("shoud extend Container", function () {
        chai_1.expect(App.application instanceof lazy_dependable_1.Container).to.be.true;
    });
    before(function (done) {
        App.application.serve({}, function () {
            done();
        });
    });
    describe("Configuration", function () {
        it("shoud be initialized", function () {
            chai_1.expect(App.application.config).to.exist;
        });
        it("shoud match package version and name", function () {
            chai_1.expect(App.application.name).to.exist;
            chai_1.expect(App.application.version).to.exist;
            chai_1.expect(App.application.name).to.be.eql(packageData.name);
            chai_1.expect(App.application.version).to.be.eql(packageData.version);
        });
        it("should be in active status", function () {
            chai_1.expect(App.application.active).to.be.true;
        });
        it("should return proper running status", function () {
            chai_1.expect(App.application.active).to.be.true;
            chai_1.expect(App.application.status).to.be.eql({
                active: true,
                name: packageData.name,
                version: packageData.version
            });
        });
        describe("Builder", function () {
            it("should call configure of all config builders", function () {
                chai_1.expect(configSpy.calledOnce).to.be.true;
            });
            it("should have custom config properties added by config builder", function () {
                var config = App.application.config;
                chai_1.expect(config["me"]).to.exist.and.to.eql("harsh raval");
                chai_1.expect(config.getExtra("ok")).to.exist.and.to.eql("awesome");
            });
        });
    });
    describe("Initializers", function () {
        it("should call initialize of all initializers", function () {
            chai_1.expect(initSpy.calledOnce).to.be.true;
        });
    });
    describe("Modules", function () {
        it("should have no unresolved modules", function () {
            chai_1.expect(App.application.modules.unresolved.empty()).to.be.true;
        });
        it("should have all default modules resolved", function () {
            chai_1.expect(App.application.resolved).to.exist;
            chai_1.expect(Object.keys(App.application.resolved)).to.be.an("array").and.to.be.not.empty
                .and.to.be.equal(["database", "passport", "http", "app"]);
        });
        it("should be able to resolve app module", function (done) {
            App.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, function (app) {
                chai_1.expect(app).to.exist;
                chai_1.expect(app.get).to.exist;
                chai_1.expect(app.post).to.exist;
                chai_1.expect(app.put).to.exist;
                chai_1.expect(app.delete).to.exist;
                done();
            });
        });
        it("should be able to resolve database module", function (done) {
            App.application.resolve(ModuleNames_1.default.DATABASE_MODULE, function (database) {
                chai_1.expect(database).to.exist;
                chai_1.expect(database.isConnected()).to.be.true;
                chai_1.expect(database.registerModel).to.exist;
                chai_1.expect(database.isModelExistInModels("dummy")).to.be.false;
                done();
            });
        });
        it("should have empty exportable modules", function () {
            chai_1.expect(App.application.exportableModules).to.be.an("array").and.to.be.empty;
        });
        it("should thorw error for unavailable modules", function () {
            var funcWrapper = function () { new App.Module("users"); };
            chai_1.expect(funcWrapper).to.throw("Not able to find module with name users. Please make sure its loaded.");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
