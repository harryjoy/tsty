"use strict";
var sinon = require("sinon");
var chai_1 = require("chai");
var lazy_dependable_1 = require("lazy-dependable");
var App = require("../index");
var TestInitializer_1 = require("./mocks/TestInitializer");
var TestConfigBuilder_1 = require("./mocks/TestConfigBuilder");
var TestDB_1 = require("./mocks/TestDB");
describe("Application", function () {
    var PACKAGE_DATA = require("../../package.json");
    var DEFAULT_MODULES = ["database", "passport", "http", "app"];
    var dummyInit = new TestInitializer_1.default();
    var dummyConfigBuilder = new TestConfigBuilder_1.default();
    var initSpy, configSpy;
    before(function () {
        initSpy = sinon.spy(dummyInit, "initialize");
        configSpy = sinon.spy(dummyConfigBuilder, "configure");
        App.initializer.addInitializer(dummyInit);
        App.DatabaseFactory.registerDbEngine("test", TestDB_1.default);
        App.configBuilder.addConfigBuilder(dummyConfigBuilder);
    });
    it("shoud be initialized", function () {
        chai_1.expect(App).to.exist;
        chai_1.expect(App.application).to.exist;
        chai_1.expect(App.application).to.be.an("object");
    });
    it("shoud extend Container", function () {
        chai_1.expect(App.application instanceof lazy_dependable_1.Container).to.be.true;
    });
    before(function (done) {
        App.application.serve({}, function () {
            done();
        });
    });
    describe("Configuration", function () {
        it("shoud be initialized", function () {
            chai_1.expect(App.application.config).to.exist;
        });
        it("shoud match package version and name", function () {
            chai_1.expect(App.application.name).to.exist;
            chai_1.expect(App.application.version).to.exist;
            chai_1.expect(App.application.name).to.be.eql(PACKAGE_DATA.name);
            chai_1.expect(App.application.version).to.be.eql(PACKAGE_DATA.version);
        });
        it("should be in active status", function () {
            chai_1.expect(App.application.active).to.be.true;
        });
        it("should return proper running status", function () {
            chai_1.expect(App.application.active).to.be.true;
            chai_1.expect(App.application.status).to.be.eql({
                active: true,
                name: PACKAGE_DATA.name,
                version: PACKAGE_DATA.version
            });
        });
        describe("Builder", function () {
            it("should call configure of all config builders", function () {
                chai_1.expect(configSpy.calledOnce).to.be.true;
            });
            it("should have custom config properties added by config builder", function () {
                var config = App.application.config;
                chai_1.expect(config.db).to.exist.and.to.eql("test");
                chai_1.expect(config["me"]).to.exist.and.to.eql("harsh raval");
                chai_1.expect(config.getExtra("ok")).to.exist.and.to.eql("awesome");
            });
        });
    });
    describe("Initializers", function () {
        it("should call initialize of all initializers", function () {
            chai_1.expect(initSpy.calledOnce).to.be.true;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
