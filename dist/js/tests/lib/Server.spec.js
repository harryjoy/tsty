"use strict";
var request = require("supertest");
var chai_1 = require("chai");
var App = require("../../index");
var ModuleNames_1 = require("../../lib/config/ModuleNames");
describe("Application: Server", function () {
    var PACKAGE_DATA = require("../../../package.json");
    var DEFAULT_MODULES = ["database", "passport", "http", "app"];
    it("should be able to resolve app module", function (done) {
        App.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, function (app) {
            chai_1.expect(app).to.exist;
            chai_1.expect(app.get).to.exist;
            chai_1.expect(app.post).to.exist;
            chai_1.expect(app.put).to.exist;
            chai_1.expect(app.delete).to.exist;
            done();
        });
    });
    it("should return exportable modoules defined in application", function (done) {
        App.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, function (app) {
            request(app).get(App.application.config.url.modules)
                .expect(200)
                .end(function (err, res) {
                chai_1.expect(err).to.not.exist;
                chai_1.expect(res.body).to.be.an("array").and.to.be.empty;
                done();
            });
        });
    });
    it("should return all modoules defined in application", function (done) {
        App.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, function (app) {
            request(app).get(App.application.config.url.allModules)
                .expect(200)
                .end(function (err, res) {
                chai_1.expect(err).to.not.exist;
                chai_1.expect(res.body).to.be.an("array").and.to.be.not.empty
                    .and.to.be.equal(DEFAULT_MODULES);
                done();
            });
        });
    });
    it("should return correct framework information", function (done) {
        App.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, function (app) {
            request(app).get(App.application.config.url.framework)
                .expect(200)
                .end(function (err, res) {
                chai_1.expect(err).to.not.exist;
                chai_1.expect(res.body).to.eql({
                    name: PACKAGE_DATA.name,
                    version: PACKAGE_DATA.version
                });
                done();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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QUNqRCxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksRUFBRSxDQUFDO1lBQ1gsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFVBQUMsSUFBSTtRQUNuRCxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxxQkFBVyxDQUFDLGtCQUFrQixFQUFFLFVBQUMsR0FBRztZQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7aUJBQ2pELE1BQU0sQ0FBQyxHQUFHLENBQUM7aUJBQ1gsR0FBRyxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUc7Z0JBQ1YsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUN6QixhQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7b0JBQ3BCLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSTtvQkFDdkIsT0FBTyxFQUFFLFlBQVksQ0FBQyxPQUFPO2lCQUNoQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxFQUFFLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0cy9saWIvU2VydmVyLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gXCJzdXBlcnRlc3RcIjtcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgKiBhcyBBcHAgZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5pbXBvcnQgTW9kdWxlTmFtZXMgZnJvbSBcIi4uLy4uL2xpYi9jb25maWcvTW9kdWxlTmFtZXNcIjtcblxuZGVzY3JpYmUoXCJBcHBsaWNhdGlvbjogU2VydmVyXCIsICgpID0+IHtcbiAgICBjb25zdCBQQUNLQUdFX0RBVEEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcGFja2FnZS5qc29uXCIpO1xuICAgIGNvbnN0IERFRkFVTFRfTU9EVUxFUyA9IFsgXCJkYXRhYmFzZVwiLCBcInBhc3Nwb3J0XCIsIFwiaHR0cFwiLCBcImFwcFwiIF07XG5cbiAgICBpdChcInNob3VsZCBiZSBhYmxlIHRvIHJlc29sdmUgYXBwIG1vZHVsZVwiLCAoZG9uZSkgPT4ge1xuICAgICAgICBBcHAuYXBwbGljYXRpb24ucmVzb2x2ZShNb2R1bGVOYW1lcy5FWFBSRVNTX0FQUF9NT0RVTEUsIChhcHApID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChhcHApLnRvLmV4aXN0O1xuICAgICAgICAgICAgZXhwZWN0KGFwcC5nZXQpLnRvLmV4aXN0O1xuICAgICAgICAgICAgZXhwZWN0KGFwcC5wb3N0KS50by5leGlzdDtcbiAgICAgICAgICAgIGV4cGVjdChhcHAucHV0KS50by5leGlzdDtcbiAgICAgICAgICAgIGV4cGVjdChhcHAuZGVsZXRlKS50by5leGlzdDtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCByZXR1cm4gZXhwb3J0YWJsZSBtb2RvdWxlcyBkZWZpbmVkIGluIGFwcGxpY2F0aW9uXCIsIChkb25lKSA9PiB7XG4gICAgICAgIEFwcC5hcHBsaWNhdGlvbi5yZXNvbHZlKE1vZHVsZU5hbWVzLkVYUFJFU1NfQVBQX01PRFVMRSwgKGFwcCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdChhcHApLmdldChBcHAuYXBwbGljYXRpb24uY29uZmlnLnVybC5tb2R1bGVzKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgICAgICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvLm5vdC5leGlzdDtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5KS50by5iZS5hbihcImFycmF5XCIpLmFuZC50by5iZS5lbXB0eTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJldHVybiBhbGwgbW9kb3VsZXMgZGVmaW5lZCBpbiBhcHBsaWNhdGlvblwiLCAoZG9uZSkgPT4ge1xuICAgICAgICBBcHAuYXBwbGljYXRpb24ucmVzb2x2ZShNb2R1bGVOYW1lcy5FWFBSRVNTX0FQUF9NT0RVTEUsIChhcHApID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QoYXBwKS5nZXQoQXBwLmFwcGxpY2F0aW9uLmNvbmZpZy51cmwuYWxsTW9kdWxlcylcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcbiAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoZXJyKS50by5ub3QuZXhpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keSkudG8uYmUuYW4oXCJhcnJheVwiKS5hbmQudG8uYmUubm90LmVtcHR5XG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5kLnRvLmJlLmVxdWFsKERFRkFVTFRfTU9EVUxFUyk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCByZXR1cm4gY29ycmVjdCBmcmFtZXdvcmsgaW5mb3JtYXRpb25cIiwgKGRvbmUpID0+IHtcbiAgICAgICAgQXBwLmFwcGxpY2F0aW9uLnJlc29sdmUoTW9kdWxlTmFtZXMuRVhQUkVTU19BUFBfTU9EVUxFLCAoYXBwKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0KGFwcCkuZ2V0KEFwcC5hcHBsaWNhdGlvbi5jb25maWcudXJsLmZyYW1ld29yaylcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcbiAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoZXJyKS50by5ub3QuZXhpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keSkudG8uZXFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFBBQ0tBR0VfREFUQS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogUEFDS0FHRV9EQVRBLnZlcnNpb25cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
