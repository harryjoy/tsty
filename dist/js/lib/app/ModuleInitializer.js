"use strict";
var Promise = require("bluebird");
var StaticLogger_1 = require("../../components/logs/StaticLogger");
var ModuleNames_1 = require("../config/ModuleNames");
var ModulesLoader_1 = require("../module/ModulesLoader");
var ModuleInitializer = (function () {
    function ModuleInitializer() {
    }
    ModuleInitializer.prototype.initialize = function (application) {
        this.application = application;
        this.config = this.application.config;
        this.moduleLoader = new ModulesLoader_1.default(this.config.packageJson, this.config.moduleNameInPackageJson, this.config.moduleAppFileNameInPackageJson, this.config.moduleDependenciesInPackageJson);
        var defer = Promise.defer();
        this.application.resolve(ModuleNames_1.default.EXPRESS_APP_MODULE, this.bootstrapModules.bind(this, defer));
        return defer.promise;
    };
    ModuleInitializer.prototype.bootstrapModules = function (defer, app) {
        var _this = this;
        var disabledModules = this.config.disabledModules;
        var modulesToLoad = this.config.modulePaths;
        if (modulesToLoad.indexOf("node_modules") === -1) {
            modulesToLoad.push("node_modules");
        }
        var promises = [];
        if (modulesToLoad && modulesToLoad.length > 0) {
            modulesToLoad.forEach(function (path) {
                promises.push(_this.moduleLoader.loadModule(_this.application.modules, disabledModules, path));
            });
        }
        return Promise.all(promises)
            .then(this.allModulesLoaded.bind(this, app, defer))
            .catch(function (error) {
            StaticLogger_1.default.error("Error while loading modules: " + error);
            defer.resolve(false);
        });
    };
    ModuleInitializer.prototype.allModulesLoaded = function (app, defer) {
        var _this = this;
        app.use(this.config.url.modules, function (req, res) {
            res.json(_this.application.exportableModules);
        });
        app.use(this.config.url.allModules, function (req, res) {
            res.json(Object.keys(_this.application.resolved));
        });
        var modules = this.application.modules;
        if (!modules.unresolved.empty()) {
            throw "Can not start. There are packages with unresolved dependencies: "
                + modules.listOfUnresolved();
        }
        this.enableModules(defer);
    };
    ModuleInitializer.prototype.enableModules = function (defer) {
        var _this = this;
        var defers = [];
        this.application.modules.traverse(this.moduleActivator.bind(this, defers));
        Promise.all(defers).done(function () {
            _this.application.modules.traverse(_this.moduleRegistrator.bind(_this));
            defer.resolve(true);
        });
    };
    ModuleInitializer.prototype.moduleActivator = function (defers, loadedModule) {
        if (!loadedModule) {
            return;
        }
        var defer = Promise.defer();
        defers.push(defer);
        loadedModule.load();
        this.application.resolve(loadedModule.name, defer.resolve.bind(defer));
    };
    ModuleInitializer.prototype.moduleRegistrator = function (loadedModule) {
        if (!loadedModule) {
            return;
        }
        this.application.exportableModules.push({
            name: loadedModule.name,
            version: loadedModule.version
        });
    };
    return ModuleInitializer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModuleInitializer;

//# sourceMappingURL=data:application/json;base64,
