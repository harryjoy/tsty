"use strict";
var express = require("express");
var http = require("http");
var https = require("https");
var fs = require("fs");
var passport = require("passport");
var cookieParser = require("cookie-parser");
var expressJwt = require("express-jwt");
var methodOverride = require("method-override");
var errorHandler = require("errorhandler");
var ModuleNames_1 = require("../config/ModuleNames");
var ExpressConfigManager_1 = require("./express/ExpressConfigManager");
var ExpressServer = (function () {
    function ExpressServer() {
        this.name = "express";
    }
    ExpressServer.prototype.destroy = function () {
        this.app = null;
        this.database = null;
        this.application = null;
    };
    ExpressServer.prototype.start = function (application, database) {
        var _this = this;
        this.application = application;
        this.database = database.connection;
        this.app = express();
        var config = this.application.config;
        this.configureExpress(config);
        this.configureHttpServers(config);
        this.application.register(ModuleNames_1.default.EXPRESS_APP_MODULE, function () {
            return _this.app;
        });
        this.application.app = this.app;
        var configs = ExpressConfigManager_1.default.getConfigs();
        if (configs && configs.length > 0) {
            configs.forEach(function (config) {
                config.configure(_this.app);
            });
        }
    };
    ExpressServer.prototype.afterStartup = function (cb) {
        var _this = this;
        this.app.get(this.application.config.url.framework, function (req, res) {
            res.status(200).send(_this.application.config.framework);
        });
        this.app.route("*").get(function (req, res, next) {
            res.status(404).send({
                url: req.originalUrl,
                error: "Not Found"
            });
        });
        if (process.env.NODE_ENV === "development") {
            this.app.use(errorHandler());
        }
        if (cb) {
            cb(this);
        }
    };
    ExpressServer.prototype.configureHttpServers = function (config) {
        var httpServer = http.createServer(this.app);
        this.application.register(ModuleNames_1.default.HTTP_MODULE, httpServer);
        httpServer.listen(config.http.port);
        if (config.https && config.https.port
            && config.https.key
            && config.https.ca
            && config.https.cert) {
            var options = {
                key: fs.readFileSync(config.https.key),
                ca: fs.readFileSync(config.https.ca),
                cert: fs.readFileSync(config.https.cert)
            };
            var httpsServer = https.createServer(options, this.app);
            this.application.register(ModuleNames_1.default.HTTPS_MODULE, httpsServer);
            httpServer.listen(config.https.port);
        }
        return httpServer;
    };
    ExpressServer.prototype.configureExpress = function (config) {
        this.app.use(function (req, res, next) {
            res.setHeader("X-Powered-By", config.framework.name);
            next();
        });
        this.app.use(cookieParser());
        this.app.use(methodOverride());
        this.app.use("/api", expressJwt({
            secret: config.secret,
            credentialsRequired: config.credentialsRequired
        }), function (req, res, next) {
            if (req.user) {
                req.user = JSON.parse(decodeURI(req.user));
            }
            next();
        });
        this.addPassportSupport();
    };
    ExpressServer.prototype.addPassportSupport = function () {
        this.app.use(passport.initialize());
        this.app.use(passport.session());
        this.application.register(ModuleNames_1.default.PASSPORT_MODULE, passport);
    };
    return ExpressServer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ExpressServer;

//# sourceMappingURL=data:application/json;base64,
