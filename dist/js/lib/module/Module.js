"use strict";
var Helpers = require("../../components/utils/Helpers");
var Events_1 = require("../../components/events/Events");
var ModuleConfig_1 = require("./ModuleConfig");
var Logger_1 = require("../../components/logs/Logger");
var index_1 = require("../../index");
var Module = (function () {
    function Module(name) {
        this.dependantModule = index_1.application.modules.findModule(name);
        if (!this.dependantModule) {
            index_1.application.modules.dumpToConsole();
            throw "Not able to find module with name " + name + ". Please make sure its loaded.";
        }
        this.name = Helpers.lowerCaseFirstLetter(this.dependantModule.name);
        this.events = new Events_1.default(this.name);
        this.config = index_1.application.config;
        this.models = [];
    }
    Module.prototype.register = function (cb) {
        index_1.application.register(this.name, cb);
    };
    Module.prototype.addDbModel = function (model) {
        if (!model.db && (!model.dbs || model.dbs.length === 0)) {
            model.dbs = [ModuleConfig_1.default.DEFAULT_DB_NAME];
        }
        else if (model.db && (!model.dbs || model.dbs.length === 0)) {
            model.dbs = [model.db];
        }
        this.models.push(model);
        return this;
    };
    Module.prototype.buildDbModels = function (database, override) {
        var _this = this;
        var _loop_1 = function(model) {
            if (database.isModelExistInModels(model.name) && !override) {
                Logger_1.default.info("Model already exists, skipping it: " + model.name);
                return "continue";
            }
            database.updateModelStructure(model);
            if (model.listeners && model.listeners.length > 0) {
                database.bindModelListeners(model, model.listeners);
            }
            var dbModels = database.registerModel(model);
            dbModels.forEach(function (dbModel, i) {
                database.registerModelPostSteps(model.name, dbModel);
                _this.events.emit(ModuleConfig_1.default.DB_MODEL_READY_EVENT, {
                    model: dbModel,
                    db: model.dbs[i]
                });
            });
        };
        for (var _i = 0, _a = this.models; _i < _a.length; _i++) {
            var model = _a[_i];
            var state_1 = _loop_1(model);
            if (state_1 === "continue") continue;
        }
        this.events.emit(ModuleConfig_1.default.DB_MODELS_READY_EVENT);
    };
    Module.prototype.addRoute = function (routePath, args) {
        return this.addRoutes([routePath], args);
    };
    Module.prototype.addRoutes = function (routePaths, args) {
        var _this = this;
        routePaths.forEach(function (path) {
            if (require(path).routes) {
                require(path).routes.apply(_this, args);
            }
            else {
                require(path).default.apply(_this, args);
            }
        });
        return this;
    };
    Module.prototype.addRouteFunc = function (routeFunc, args) {
        routeFunc.apply(this, args);
        return this;
    };
    return Module;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Module;

//# sourceMappingURL=data:application/json;base64,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LENBQUMsS0FBSyxDQUFDLEtBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBWSxHQUFaLFVBQWEsU0FBbUIsRUFBRSxJQUFnQjtRQUM5QyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxhQUFDO0FBQUQsQ0EzRUEsQUEyRUMsSUFBQTtBQTNFRDt3QkEyRUMsQ0FBQSIsImZpbGUiOiJsaWIvbW9kdWxlL01vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy91dGlscy9IZWxwZXJzXCI7XG5pbXBvcnQgRXZlbnRzIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2V2ZW50cy9FdmVudHNcIjtcbmltcG9ydCBEZXBlbmRhbnRNb2R1bGUgZnJvbSBcIi4vRGVwZW5kYW50TW9kdWxlXCI7XG5pbXBvcnQgTW9kdWxlQ29uZmlnIGZyb20gXCIuL01vZHVsZUNvbmZpZ1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9sb2dzL0xvZ2dlclwiO1xuaW1wb3J0IHsgQXBwRGF0YWJhc2UgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kYXRhYmFzZS9EYXRhYmFzZVwiO1xuaW1wb3J0IHsgSURiTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kYXRhYmFzZS9JRGJNb2RlbFwiO1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gXCIuLi9jb25maWcvSUNvbmZpZ1wiO1xuaW1wb3J0IHsgYXBwbGljYXRpb24gfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kdWxlIHtcbiAgICBldmVudHM6IEV2ZW50cztcbiAgICBkZXBlbmRhbnRNb2R1bGU6IERlcGVuZGFudE1vZHVsZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY29uZmlnOiBJQ29uZmlnO1xuXG4gICAgcHJpdmF0ZSBtb2RlbHM6IEFycmF5PElEYk1vZGVsPjtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRlcGVuZGFudE1vZHVsZSA9IGFwcGxpY2F0aW9uLm1vZHVsZXMuZmluZE1vZHVsZShuYW1lKTtcbiAgICAgICAgaWYgKCF0aGlzLmRlcGVuZGFudE1vZHVsZSkge1xuICAgICAgICAgICAgYXBwbGljYXRpb24ubW9kdWxlcy5kdW1wVG9Db25zb2xlKCk7XG4gICAgICAgICAgICB0aHJvdyBcIk5vdCBhYmxlIHRvIGZpbmQgbW9kdWxlIHdpdGggbmFtZSBcIiArIG5hbWUgKyBcIi4gUGxlYXNlIG1ha2Ugc3VyZSBpdHMgbG9hZGVkLlwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IEhlbHBlcnMubG93ZXJDYXNlRmlyc3RMZXR0ZXIodGhpcy5kZXBlbmRhbnRNb2R1bGUubmFtZSk7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50cyh0aGlzLm5hbWUpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGFwcGxpY2F0aW9uLmNvbmZpZztcbiAgICAgICAgdGhpcy5tb2RlbHMgID0gW107XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKHRoaXMubmFtZSwgY2IpO1xuICAgIH1cblxuICAgIGFkZERiTW9kZWwobW9kZWw6IElEYk1vZGVsKTogTW9kdWxlIHtcbiAgICAgICAgaWYgKCFtb2RlbC5kYiAmJiAoIW1vZGVsLmRicyB8fCBtb2RlbC5kYnMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgbW9kZWwuZGJzID0gW01vZHVsZUNvbmZpZy5ERUZBVUxUX0RCX05BTUVdO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmRiICYmICghbW9kZWwuZGJzIHx8IG1vZGVsLmRicy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICBtb2RlbC5kYnMgPSBbbW9kZWwuZGJdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kZWxzLnB1c2gobW9kZWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBidWlsZERiTW9kZWxzKGRhdGFiYXNlOiBBcHBEYXRhYmFzZTxhbnksIElEYk1vZGVsLCBhbnk+LCBvdmVycmlkZT86IGJvb2xlYW4pIHtcbiAgICAgICAgZm9yIChsZXQgbW9kZWwgb2YgdGhpcy5tb2RlbHMpIHtcbiAgICAgICAgICAgIGlmIChkYXRhYmFzZS5pc01vZGVsRXhpc3RJbk1vZGVscyhtb2RlbC5uYW1lKSAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuaW5mbyhcIk1vZGVsIGFscmVhZHkgZXhpc3RzLCBza2lwcGluZyBpdDogXCIgKyBtb2RlbC5uYW1lKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YWJhc2UudXBkYXRlTW9kZWxTdHJ1Y3R1cmUobW9kZWwpO1xuICAgICAgICAgICAgaWYgKG1vZGVsLmxpc3RlbmVycyAmJiBtb2RlbC5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGRhdGFiYXNlLmJpbmRNb2RlbExpc3RlbmVycyhtb2RlbCwgbW9kZWwubGlzdGVuZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkYk1vZGVscyA9IGRhdGFiYXNlLnJlZ2lzdGVyTW9kZWwobW9kZWwpO1xuICAgICAgICAgICAgZGJNb2RlbHMuZm9yRWFjaCgoZGJNb2RlbCwgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVnaXN0ZXJNb2RlbFBvc3RTdGVwcyhtb2RlbC5uYW1lLCBkYk1vZGVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KE1vZHVsZUNvbmZpZy5EQl9NT0RFTF9SRUFEWV9FVkVOVCwge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbDogZGJNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgZGI6IG1vZGVsLmRic1tpXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdChNb2R1bGVDb25maWcuREJfTU9ERUxTX1JFQURZX0VWRU5UKTtcbiAgICB9XG5cbiAgICBhZGRSb3V0ZShyb3V0ZVBhdGg6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pik6IE1vZHVsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFJvdXRlcyhbcm91dGVQYXRoXSwgYXJncyk7XG4gICAgfVxuXG4gICAgYWRkUm91dGVzKHJvdXRlUGF0aHM6IEFycmF5PHN0cmluZz4sIGFyZ3M6IEFycmF5PGFueT4pOiBNb2R1bGUge1xuICAgICAgICByb3V0ZVBhdGhzLmZvckVhY2goKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcXVpcmUocGF0aCkucm91dGVzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWlyZShwYXRoKS5yb3V0ZXMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcXVpcmUocGF0aCkuZGVmYXVsdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFkZFJvdXRlRnVuYyhyb3V0ZUZ1bmM6IEZ1bmN0aW9uLCBhcmdzOiBBcnJheTxhbnk+KTogTW9kdWxlIHtcbiAgICAgICAgcm91dGVGdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
