"use strict";
var fs = require("fs");
var path = require("path");
var Promise = require("bluebird");
var StaticLogger_1 = require("../../components/logs/StaticLogger");
var ModulesLoader = (function () {
    function ModulesLoader(packageJson, moduleNameInPackageJson, moduleAppFileNameInPackageJson, moduleDependenciesInPackageJson) {
        this.packageJson = packageJson;
        this.moduleNameInPackageJson = moduleNameInPackageJson;
        this.moduleAppFileNameInPackageJson = moduleAppFileNameInPackageJson;
        this.moduleDependenciesInPackageJson = moduleDependenciesInPackageJson;
    }
    ModulesLoader.prototype.loadModule = function (list, disabledModules, moduleBase) {
        var deferred = Promise.defer();
        fs.readdir(path.join(process.cwd(), moduleBase), this.processDirs.bind(this, list, disabledModules, moduleBase, deferred));
        return deferred.promise;
    };
    ModulesLoader.prototype.processDirs = function (list, disabledModules, moduleBase, deferred, error, files) {
        var _this = this;
        if (!error && files && files.length > 0) {
            for (var i in disabledModules) {
                var index = files.indexOf(i);
                if (index < 0) {
                    continue;
                }
                files.splice(index, 1);
            }
            var promises_1 = [];
            files.forEach(function (file) {
                var deferred = Promise.defer();
                fs.readFile(path.join(process.cwd(), moduleBase, file, _this.packageJson), _this.processPacakgeJsonFile.bind(_this, list, moduleBase, file, deferred));
                promises_1.push(deferred.promise);
            });
            Promise.all(promises_1).then(function () {
                return deferred.resolve();
            });
        }
        else {
            if (error && error.code !== "ENOENT") {
                StaticLogger_1.default.error(error);
                return deferred.reject(error);
            }
            return deferred.resolve();
        }
    };
    ModulesLoader.prototype.processPacakgeJsonFile = function (list, moduleBase, file, deferred, error, fileData) {
        if (error || !fileData) {
            return deferred.resolve();
        }
        try {
            var data = JSON.parse(fileData);
            if (data[this.moduleNameInPackageJson]) {
                var moduleAppFile = data[this.moduleAppFileNameInPackageJson];
                var dependantModule = list.createModule(data.name, data.version, path.join(moduleBase, file), moduleAppFile);
                var dependencies = data[this.moduleDependenciesInPackageJson];
                if (dependencies) {
                    dependantModule.cloneDependencies(dependencies);
                }
                list.add(dependantModule);
            }
        }
        catch (err) {
            StaticLogger_1.default.error(err);
            return deferred.reject(err);
        }
        return deferred.resolve();
    };
    return ModulesLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModulesLoader;

//# sourceMappingURL=data:application/json;base64,
